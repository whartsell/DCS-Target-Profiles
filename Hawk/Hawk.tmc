include "target.tmh"
include "util.ttm"
include "keyboard.ttm"


int main()
{
	Configure(&HCougar,MODE_EXCLUDED);
	Configure(&T16000,MODE_EXCLUDED);
	SetKBRate(50, 75);
    if(Init(&EventHandle)) return 1; // declare the event handler, return on error

	//Initialize Backlights
    	//ActKey(PULSE+KEYON+LED(&Throttle, LED_INTENSITY, ThrottleBL_OFF));

	//AXIS Assignment
	MapAxis(&Joystick, JOYX, DX_X_AXIS); 
	MapAxis(&Joystick, JOYY, DX_Y_AXIS);
	MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS);
	MapAxis(&Throttle, THR_RIGHT, DX_Z_AXIS); 
	MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS);
	MapAxis(&Throttle, SCY, DX_YROT_AXIS, AXIS_REVERSED, MAP_ABSOLUTE); 
	SetSCurve(&Throttle, SCY, 0, 20, 0, 10, -4); 
	MapAxis(&Throttle, SCX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE); 
	SetSCurve(&Throttle, SCX, 0, 20, 0, 10, -4);

//Layers&Modes
	SetShiftButton(&Joystick,S3,&Throttle,BSF,BSB);
	
//STICK

	//S2 Weapon Release
		//MapKey(&Joystick, S2,);

	//S1 Master Mode Control Button
		//MapKey(&Joystick, S1,);
	//Trim
		MapKey(&Joystick,H1D,Trim_Nose_Up); //needs mapping
		MapKey(&Joystick,H1U,Trim_Nose_Down);
		MapKey(&Joystick,H1L,Trim_Left_Wing_Down);
		MapKey(&Joystick,H1R,Trim_Right_Wing_Down); //needs mapping


	//TMS
		//MapKey(&Joystick,H2D,);
		//MapKey(&Joystick,H2U,);
		//MapKey(&Joystick,H2L,);
		//MapKey(&Joystick,H2R,);

	//Trigger 
		//TG1
			//MapKey(&Joystick,TG1,);
		//TG2
			//MapKey(&Joystick,TG2,);
	
	//DMS
		//MapKey(&Joystick,H3D,);
		//MapKey(&Joystick,H3U,);
		//MapKey(&Joystick,H3L,);
		//MapKey(&Joystick,H3R,);

	//CMS
		//MapKey(&Joystick,H4D,);
		//MapKey(&Joystick,H4U,);
		//MapKey(&Joystick,H4L,);
		//MapKey(&Joystick,H4R,);
		//MapKey(&Joystick,H4P,); 
	
	//S3 Pinky Switch
		//MapKey(&Joystick, S3,);
	
	//S4 Paddle Switch
		//MapKey(&Joystick, S4,TEMPO (TrackIRPause,TrackIRCenter));

//THROTTLE

	//Pinky
		//MapKey(&Throttle,PSF,);
		//MapKey(&Throttle,PSM,);
		//MapKey(&Throttle,PSB,);
		
	//Left Throttle Button
		MapKey(&Throttle,LTB,Start_Re_light_Button);
	
	//Slew
		//MapKey(&Throttle,SC,); 

	//Coolie
		//MapKey(&Throttle,CSD,);
		//MapKey(&Throttle,CSU,);
		//MapKey(&Throttle,CSL,);
		//MapKey(&Throttle,CSR,);
	
	//Mic Switch
		MapKey(&Throttle, MSD,Communication_menu);
		MapKey(&Throttle, MSU,TsPTT);
		//MapKey(&Throttle, MSL,);
		//MapKey(&Throttle, MSR,);
		//MapKey(&Throttle, MSP,TsPTT);	// TeamSpeak

	//Speed Brake
		MapKey(&Throttle,SPDF,PULSE + Airbrake);
		MapKeyR(&Throttle,SPDF,PULSE + Airbrake);
		//MapKey(&Throttle,SPDM,);
		MapKey(&Throttle,SPDB,PULSE + Airbrake);
		MapKeyR(&Throttle,SPDB,PULSE + Airbrake);
	//Boat
		//MapKey(&Throttle,BSF,);
		//MapKey(&Throttle,BSM,);
		//MapKey(&Throttle,BSB,);
	
	//China Hat
		//MapKey(&Throttle,CHF,);
		//MapKey(&Throttle,CHB,);
	
	
//Throttle Panel

	//Engine Fuel Flow
		//Left
		//MapKey(&Throttle,EFLNORM,);
		//MapKey(&Throttle,EFLOVER,);
		
		//Right
		//MapKey(&Throttle,EFRNORM,);
		//MapKey(&Throttle,EFROVER,);
	
	//Engine Oper
		//Left
		//MapKey(&Throttle,EOLIGN,);
		//MapKey(&Throttle,EOLNORM,);
		//MapKey(&Throttle,EOLMOTOR,);
		
		//Right
		//MapKey(&Throttle,EORIGN,);
		//MapKey(&Throttle,EORNORM,);
		//MapKey(&Throttle,EORMOTOR,);
				
	//APU
		//MapKey(&Throttle,APUON,);
		//MapKey(&Throttle,APUOFF,);
	
	//Flaps
		MapKey(&Throttle,FLAPU,PULSE + Flaps_Prev_Detent); 
		MapKeyR(&Throttle,FLAPU,PULSE + Flaps_Next_Detent);
		//MapKey(&Throttle,FLAPM,);
		MapKey(&Throttle,FLAPD,PULSE + Flaps_Next_Detent); 
		MapKeyR(&Throttle,FLAPD,PULSE + Flaps_Prev_Detent);
	//Idle Cutoff
		//Left
		//MapKey(&Throttle,IDLELON,);
		//MapKey(&Throttle,IDLELOFF,);
		
		//Right
		MapKey(&Throttle,IDLERON,Idle_Cut_off); //DX1
		//MapKey(&Throttle,IDLEROFF,PULSE + Idle_Cut_off);
	
	// Throttle Friction Control
	
	
	//Landing Gear Horn Silence
		MapKey(&Throttle,LDGH,PULSE + Landing_Gear_Toggle);

	//EAC
		//MapKey(&Throttle,EACON,);
		//MapKey(&Throttle,EACOFF,);
	//RDR Altm
		//MapKey(&Throttle,RDRNRM,);
		//MapKey(&Throttle,RDRDIS,);
	//AP Engage/Disengage
		//MapKey(&Throttle,APENG,);

	//AP Select Switch
		//MapKey(&Throttle,APPAT,);
		//MapKey(&Throttle,APAH,);
		//MapKey(&Throttle,APALT,);


}


int EventHandle(int type, alias o, int x)
{
    DefaultMapping(&o, x);
	
	//add event handling code here
}