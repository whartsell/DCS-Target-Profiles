include "target.tmh"
include "util.ttm"
include "keyboard.ttm"


int main()
{
	Configure(&HCougar,MODE_EXCLUDED);
	Configure(&T16000,MODE_EXCLUDED);
	SetKBRate(50, 75);
    if(Init(&EventHandle)) return 1; // declare the event handler, return on error

	//Initialize Backlights
    	//ActKey(PULSE+KEYON+LED(&Throttle, LED_INTENSITY, ThrottleBL_OFF));

	//AXIS Assignment
	MapAxis(&Joystick, JOYX, DX_X_AXIS); 
	MapAxis(&Joystick, JOYY, DX_Y_AXIS);
	MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS);
	MapAxis(&Throttle, THR_RIGHT, DX_Z_AXIS); 
	MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS);
	MapAxis(&Throttle, SCY, DX_YROT_AXIS, AXIS_REVERSED, MAP_ABSOLUTE); 
	SetSCurve(&Throttle, SCY, 0, 20, 0, 10, -4); 
	MapAxis(&Throttle, SCX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE); 
	SetSCurve(&Throttle, SCX, 0, 20, 0, 10, -4);

//Layers&Modes
	SetShiftButton(&Joystick,S3,&Throttle,BSF,BSB);
	
//STICK

	//S2 Weapon Release
		MapKey(&Joystick, S2,0);

	//S1 Master Mode Control Button
		MapKey(&Joystick, S1,0);
	//Trim
		MapKey(&Joystick,H1D,trim_Nose_Up);
		MapKey(&Joystick,H1U,trim_Nose_Down);
		MapKey(&Joystick,H1L,trim_Left_wing_Down);
		MapKey(&Joystick,H1R,trim_Right_wing_Down);


	//TMS
		MapKey(&Joystick,H2D,0);
		MapKey(&Joystick,H2U,0);
		MapKey(&Joystick,H2L,0);
		MapKey(&Joystick,H2R,0);

	//Trigger 
		//TG1
			MapKey(&Joystick,TG1,0);
		//TG2
			MapKey(&Joystick,TG2,0);
	
	//DMS
		MapKey(&Joystick,H3D,VRZoomDX);
		MapKey(&Joystick,H3U,0);
		MapKey(&Joystick,H3L,0);
		MapKey(&Joystick,H3R,0);

	//CMS
		MapKey(&Joystick,H4D,0);
		MapKey(&Joystick,H4U,0);
		MapKey(&Joystick,H4L,0);
		MapKey(&Joystick,H4R,0);
		MapKey(&Joystick,H4P,0); 
	
	//S3 Pinky Switch
		MapKey(&Joystick, S3,TEMPO (TrackIRPause,TrackIRCenter));
	
	//S4 Paddle Switch
		MapKey(&Joystick, S4,Wheel_brake_On);

//THROTTLE

	//Pinky
		MapKey(&Throttle,PSF,0);
		MapKey(&Throttle,PSM,0);
		MapKey(&Throttle,PSB,0);
		
	//Left Throttle Button
		MapKey(&Throttle,LTB,0);
	
	//Slew
		MapKey(&Throttle,SC,0); 

	//Coolie
		MapKey(&Throttle,CSD,0);
		MapKey(&Throttle,CSU,0);
		MapKey(&Throttle,CSL,0);
		MapKey(&Throttle,CSR,0);
	
	//Mic Switch
		MapKey(&Throttle, MSD,0);
		MapKey(&Throttle, MSU,TsPTT); //VAC push to talk
		MapKey(&Throttle, MSL,0);
		MapKey(&Throttle, MSR,SRSRadio1);
		MapKey(&Throttle, MSP,Communication_menu);	// TeamSpeak

	//Speed Brake
		MapKey(&Throttle,SPDF,Air_brake__Retract); //dx1
		
		MapKey(&Throttle,SPDM,0);
		MapKey(&Throttle,SPDB,Air_brake_Extend); //dx2
		
	
	//Boat
		MapKey(&Throttle,BSF,0);
		MapKey(&Throttle,BSM,0);
		MapKey(&Throttle,BSB,0);
	
	//China Hat
		MapKey(&Throttle,CHF,0);
		MapKey(&Throttle,CHB,0);
	
	
//Throttle Panel

	//Engine Fuel Flow
		//Left
		MapKey(&Throttle,EFLNORM,0);
		MapKey(&Throttle,EFLOVER,0);
		
		//Right
		MapKey(&Throttle,EFRNORM,0);
		MapKey(&Throttle,EFROVER,0);
	
	//Engine Oper
		//Left
		MapKey(&Throttle,EOLIGN,0);
		MapKey(&Throttle,EOLNORM,0);
		MapKey(&Throttle,EOLMOTOR,0);
		
		//Right
		MapKey(&Throttle,EORIGN,0);
		MapKey(&Throttle,EORNORM,0);
		MapKey(&Throttle,EORMOTOR,0);
				
	//APU
		MapKey(&Throttle,APUON,0);
		MapKey(&Throttle,APUOFF,0);
	
	//Flaps
		MapKey(&Throttle,FLAPU,PULSE + Prev_Flap_Detent);
		MapKeyR(&Throttle,FLAPU,PULSE + Next_Flap_Detent);
		MapKey(&Throttle,FLAPM,0);
		MapKey(&Throttle,FLAPD,PULSE + Next_Flap_Detent);
		MapKeyR(&Throttle,FLAPD,PULSE + Prev_Flap_Detent);
	
	//Idle Cutoff
		//Left
		MapKey(&Throttle,IDLELON,0);
		MapKey(&Throttle,IDLELOFF,0);
		
		//Right
		MapKey(&Throttle,IDLERON,PULSE + Throttle_Idle_Detent_Toggle);
		MapKey(&Throttle,IDLEROFF,PULSE + Throttle_Idle_Detent_Toggle);
	
	// Throttle Friction Control
	
	
	//Landing Gear Horn Silence
		MapKey(&Throttle,LDGH,TEMPO(PULSE + Landing_gear_warning_mute,PULSE + Landing_gear_toggle));

	//EAC
		MapKey(&Throttle,EACON,0);
		MapKey(&Throttle,EACOFF,0);
	//RDR Altm
		MapKey(&Throttle,RDRNRM,0);
		MapKey(&Throttle,RDRDIS,0);
	//AP Engage/Disengage
		MapKey(&Throttle,APENG,0);

	//AP Select Switch
		MapKey(&Throttle,APPAT,0);
		MapKey(&Throttle,APAH,0);
		MapKey(&Throttle,APALT,0);


}


int EventHandle(int type, alias o, int x)
{
    DefaultMapping(&o, x);
	
	//add event handling code here
}